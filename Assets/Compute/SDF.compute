#pragma kernel SDFGen
#pragma kernel SDFMutate

#include "../Includes/SDF.cginc"

RWTexture3D<float> _sdfTexOut;

float _sphereRadius;
bool _mouseSubtract;
bool _mouseAdd;
float4 _mouseOrigin;
float4 _mouseDir;
float _brushSize;
float _brushHeight;
bool _doEikonel;

float neighborMin(uint3 kernel, uint3 delta)
{
    float a = sdfUV(kernelToUV(kernel + delta));
    float b = sdfUV(kernelToUV(kernel - delta));
    return min(abs(a), abs(b));
}

float eikonal1d(float h, float v, float g)
{
    return min(h, v) + g;
}

float eikonal2d(float h, float v, float g)
{
    if (abs(h - v) >= g)
    {
        return eikonal1d(h, v, g);
    }
    float hv = h + v;
    float d = hv * hv - 2.0 * (h * h + v * v - g * g);
    return 0.5 * (hv + sqrt(d));
}

bool eikonal3d(float3 u, out float e, float g)
{
    float xyz = u.x + u.y + u.z;
    float n = 3.0;
    float d = (xyz * xyz) - n * ((u.x * u.x + u.y * u.y + u.z * u.z) - (g * g));
    if (d < 0.0)
    {
        return false;
    }
    e = (1.0 / n) * (xyz + sqrt(d));
    return true;
}

float eikonal(float3 u, float g)
{
    float e = 0.0;
    if (eikonal3d(u, e, g))
    {
        return e;
    }
    float e1 = eikonal2d(u.x, u.y, g);
    float e2 = eikonal2d(u.x, u.z, g);
    float e3 = eikonal2d(u.y, u.z, g);
    return min(min(e1, e2), e3);
}

[numthreads(8,8,8)]
void SDFGen(uint3 id : SV_DispatchThreadID)
{
    float3 uv = kernelToUV(id);
    float3 world = uvToWorld(uv);
    
    float current = sdSphere(world, float3(0.0f, 0.0f, 0.0f), _sphereRadius);
    
    _sdfTexOut[id.xyz] = pack(current);
}

[numthreads(8,8,8)]
void SDFMutate(uint3 id : SV_DispatchThreadID)
{
    float3 uv = kernelToUV(id);
    float current = sdfUV(uv);
    float3 world = uvToWorld(uv);
    
    if (_mouseAdd)
    {
        float toSdf = raySphereIntersect(_mouseOrigin.xyz, _mouseDir.xyz, float3(0.0, 0.0, 0.0), _sphereRadius + _brushHeight);
        float3 ro = _mouseOrigin.xyz + _mouseDir.xyz * toSdf;
        float d = sdSphere(world, ro, _brushSize);
        current = opSmoothUnion(d, current, 0.025);
    }
    if (_mouseSubtract)
    {
        float toSdf = raySphereIntersect(_mouseOrigin.xyz, _mouseDir.xyz, float3(0.0, 0.0, 0.0), _sphereRadius + _brushHeight);
        float3 ro = _mouseOrigin.xyz + _mouseDir.xyz * toSdf;
        float d = sdSphere(world, ro, _brushSize * 1.25f);
        current = opSmoothSubtraction(d, current, 0.025);
    }    
    if (_doEikonel)
    {
        float3 u;
        u.x = neighborMin(id, uint3(1, 0, 0));
        u.y = neighborMin(id, uint3(0, 1, 0));
        u.z = neighborMin(id, uint3(0, 0, 1));
    
        float g = _sdfRadius * 2.0 / _sdfTexSizeX;
        float e = eikonal(u, g);
        if (current > g) current = e;
    }
    
    _sdfTexOut[id.xyz] = pack(current);
}